C51 COMPILER V9.54   IR                                                                    04/19/2023 22:07:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: D:\Keil5MDK\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\IR.ls
                    -t) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Timer0.h"
   3          #include "Int0.h"
   4          
   5          unsigned int IR_Time;
   6          unsigned char IR_State;
   7          
   8          unsigned char IR_Data[4];
   9          unsigned char IR_pData;
  10          
  11          unsigned char IR_DataFlag;
  12          unsigned char IR_RepeatFlag;
  13          unsigned char IR_Address;
  14          unsigned char IR_Command;
  15          
  16          void IR_Init(void)
  17          {
  18   1          Timer0_Init();
  19   1          Int0_Init();
  20   1      }
  21          
  22          unsigned char IR_GetDataFlag(void)
  23          {
  24   1          if(IR_DataFlag)
  25   1          {
  26   2              IR_DataFlag=0;
  27   2              return 1;
  28   2          }
  29   1          return 0;
  30   1      }
  31          
  32          unsigned char IR_GetRepeatFlag(void)
  33          {
  34   1          if(IR_RepeatFlag)
  35   1          {
  36   2              IR_RepeatFlag=0;
  37   2              return 1;
  38   2          }
  39   1          return 0;
  40   1      }
  41          
  42          unsigned char IR_GetAddress(void)
  43          {
  44   1          return IR_Address;
  45   1      }
  46          
  47          unsigned char IR_GetCommand(void)
  48          {
  49   1          return IR_Command;
  50   1      }
  51          
  52          void Int0_Routine(void) interrupt 0
  53          {
  54   1              if(IR_State==0)
C51 COMPILER V9.54   IR                                                                    04/19/2023 22:07:10 PAGE 2   

  55   1          {
  56   2              Timer0_SetCounter(0);
  57   2              Timer0_Run(1);
  58   2              IR_State=1;
  59   2          }
  60   1          else if(IR_State==1)
  61   1          {
  62   2              IR_Time=Timer0_GetCounter();
  63   2              Timer0_SetCounter(0);
  64   2              if(IR_Time>12441-500 && IR_Time<12441+500)
  65   2              {
  66   3                  P2=0;
  67   3                  IR_State=2;
  68   3              }
  69   2              else if(IR_Time>10368-500 && IR_Time<10368+500)
  70   2              {
  71   3                  IR_RepeatFlag=1;
  72   3                  Timer0_Run(0);
  73   3                  IR_State=0;
  74   3              }
  75   2              else
  76   2              {
  77   3                  IR_State=1;
  78   3              }
  79   2          }
  80   1          else if(IR_State==2)
  81   1          {
  82   2              IR_Time=Timer0_GetCounter();
  83   2              Timer0_SetCounter(0);
  84   2      
  85   2              //! There is a bug here, the IR_Time is not correct.
  86   2              if(IR_Time>1000-500 && IR_Time<1000+500)
  87   2              {
  88   3                  IR_Data[IR_pData/8]&=~(0x01<<IR_pData%8);
  89   3                  IR_pData++;
  90   3              }
  91   2              else if(IR_Time>2000-500 && IR_Time<2000+500)
  92   2              {
  93   3                  IR_Data[IR_pData/8]|=(0x01<<IR_pData%8);
  94   3                  IR_pData++;
  95   3              }
  96   2              else
  97   2              {
  98   3                  P2=1;
  99   3                  IR_pData=0;
 100   3                  IR_State=1;
 101   3              }
 102   2              if(IR_pData==32)
 103   2              {
 104   3                  IR_pData=0;
 105   3                  if((IR_Data[0]==~IR_Data[1]) && (IR_Data[2]==~IR_Data[3]))
 106   3                  {
 107   4                      IR_Address=IR_Data[0];
 108   4                      IR_Command=IR_Data[2];
 109   4                      IR_DataFlag=1;
 110   4                  }
 111   3                  Timer0_Run(0);
 112   3                  IR_State=0;
 113   3              }
 114   2          }
 115   1      }

C51 COMPILER V9.54   IR                                                                    04/19/2023 22:07:10 PAGE 3   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    374    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
